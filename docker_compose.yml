version: '3.8'

services:
  # PostgreSQL 主資料庫
  postgres:
    image: postgres:15
    container_name: ai_stock_postgres
    environment:
      POSTGRES_DB: ai_stock_db
      POSTGRES_USER: stock_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_password_here}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stock_network

  # InfluxDB 時序資料庫
  influxdb:
    image: influxdb:2.7
    container_name: ai_stock_influxdb
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD:-your_password_here}
      DOCKER_INFLUXDB_INIT_ORG: stock_org
      DOCKER_INFLUXDB_INIT_BUCKET: stock_data
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN:-your_token_here}
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - stock_network

  # Redis 快取和任務佇列
  redis:
    image: redis:7-alpine
    container_name: ai_stock_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock_network

  # 後端API服務
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_stock_backend
    environment:
      DATABASE_URL: postgresql://stock_user:${POSTGRES_PASSWORD:-your_password_here}@postgres:5432/ai_stock_db
      REDIS_URL: redis://redis:6379/0
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-your_token_here}
      INFLUXDB_ORG: stock_org
      INFLUXDB_BUCKET: stock_data
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - influxdb
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
    networks:
      - stock_network
    restart: unless-stopped

  # 資料收集服務
  data_collector:
    build:
      context: ./data_collector
      dockerfile: Dockerfile
    container_name: ai_stock_data_collector
    environment:
      DATABASE_URL: postgresql://stock_user:${POSTGRES_PASSWORD:-your_password_here}@postgres:5432/ai_stock_db
      REDIS_URL: redis://redis:6379/0
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-your_token_here}
      INFLUXDB_ORG: stock_org
      INFLUXDB_BUCKET: stock_data
    depends_on:
      - postgres
      - redis
      - influxdb
    volumes:
      - ./data_collector:/app
    networks:
      - stock_network
    restart: unless-stopped

  # Celery Worker 後台任務處理
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_stock_celery_worker
    command: celery -A app.main.celery worker --loglevel=info
    environment:
      DATABASE_URL: postgresql://stock_user:${POSTGRES_PASSWORD:-your_password_here}@postgres:5432/ai_stock_db
      REDIS_URL: redis://redis:6379/0
      INFLUXDB_URL: http://influxdb:8086
      INFLUXDB_TOKEN: ${INFLUXDB_TOKEN:-your_token_here}
      INFLUXDB_ORG: stock_org
      INFLUXDB_BUCKET: stock_data
    depends_on:
      - postgres
      - redis
      - influxdb
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
    networks:
      - stock_network
    restart: unless-stopped

  # Celery Beat 排程器
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_stock_celery_beat
    command: celery -A app.main.celery beat --loglevel=info
    environment:
      DATABASE_URL: postgresql://stock_user:${POSTGRES_PASSWORD:-your_password_here}@postgres:5432/ai_stock_db
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
    networks:
      - stock_network
    restart: unless-stopped

  # 前端React應用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_stock_frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - stock_network
    restart: unless-stopped

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: ai_stock_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - stock_network
    restart: unless-stopped

volumes:
  postgres_data:
  influxdb_data:
  redis_data:

networks:
  stock_network:
    driver: bridge